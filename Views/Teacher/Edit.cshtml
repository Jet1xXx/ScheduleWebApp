@model ScheduleWebApp.Models.Entities.Teacher.TeacherDto

@{
    ViewData["Title"] = "Редактирование преподавателя";
}

<h1>@ViewData["Title"]</h1>

<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="TeacherId" />

            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control" data-original="@Model.LastName" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control" data-original="@Model.FirstName" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="MiddleName" class="control-label"></label>
                <input asp-for="MiddleName" class="form-control" data-original="@Model.MiddleName" />
                <span asp-validation-for="MiddleName" class="text-danger"></span>
            </div>

            <div class="form-group">
                <input asp-for="BirthDate" class="form-control" type="date"
       data-original="@(Model.BirthDate.HasValue ? Model.BirthDate.Value.ToString("yyyy-MM-dd") : "")" />
                <span asp-validation-for="BirthDate" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Address" class="control-label"></label>
                <input asp-for="Address" class="form-control" data-original="@Model.Address" />
                <span asp-validation-for="Address" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control" data-original="@Model.Email" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Phone" class="control-label"></label>
                <input asp-for="Phone" class="form-control" data-original="@Model.Phone" />
                <span asp-validation-for="Phone" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="CityId" class="control-label"></label>
                <select asp-for="CityId"
                        asp-items="ViewBag.Cities"
                        class="form-control"
                        data-original="@Model.CityId.ToString()">
                    <option value="">-- Выберите город --</option>
                </select>
                <span asp-validation-for="CityId" class="text-danger"></span>
            </div>

            <div class="form-group mt-3">
                <input type="submit" value="Сохранить" class="btn btn-primary" id="save-button" disabled />
                <a asp-action="Index" class="btn btn-secondary">Отмена</a>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.querySelector("form");
            const initialValues = {};

            // Сохранить изначальные значения всех полей формы
            form.querySelectorAll("input, select").forEach(input => {
                initialValues[input.name] = input.value;
            });

            const submitButton = form.querySelector("input[type='submit']");

            function checkChanges() {
                let changed = false;

                form.querySelectorAll("input, select").forEach(input => {
                    const initial = initialValues[input.name];
                    const current = input.value;

                    if (initial !== current) {
                        input.classList.add("border-warning", "border", "border-2");
                        changed = true;
                    } else {
                        input.classList.remove("border-warning", "border", "border-2");
                    }
                });

                // Кнопка Сохранить активна только при изменениях
                submitButton.disabled = !changed;
            }

            // Отслеживать изменения на всех полях
            form.querySelectorAll("input, select").forEach(input => {
                input.addEventListener("input", checkChanges);
                input.addEventListener("change", checkChanges);
            });

            
            checkChanges();
        });
    </script>
}

